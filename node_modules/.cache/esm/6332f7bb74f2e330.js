let Joi,RefreshToken,User,CustomErrorHandler,bcrypt,JwtService,REFRESH_SECRET;_74f‍.x([["default",()=>_74f‍.o]]);_74f‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_74f‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_74f‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_74f‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_74f‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_74f‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);








const registerController ={
   
   async register(req,res,next){

          const registerSchema = Joi.object({
                name:Joi.string().min(3).max(5).required(),
                email:Joi.string().email().required(),
                password:Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required(),
                repeat_password:Joi.ref('password ')
          });

          const {error} = registerSchema.validate(req.body);


          if(error){
              return next(error)
          }



          try {
              const exist = await User.exists({email:req.body.email});

              if(exist){
                  return next(CustomErrorHandler.alreadyExist('this email id already taken.'));
              }
              
          } catch (error) {
              return next(error)
          }
          const {name,email,password} = req.body;

        const hashedPassword = await bcrypt.hash(password,10)

        //prepare the model
      
        const user=new User({
            name,
            email,
            password:hashedPassword
      })


        let access_token;
        let refresh_token;
        try {
            const result = await user.save();
            _74f‍.g.console.log(result);
            //token
            access_token=JwtService.sign({_id:result._id,role:result.role})
            refresh_token=JwtService.sign({_id:result._id,role:result.role},'1y',REFRESH_SECRET)
             
            //database whitelist
            await RefreshToken.create({token:refresh_token});

            
        } catch (error) {
            return next(error);
        }

           res.json({access_token,refresh_token })
    }
}

_74f‍.d(registerController);