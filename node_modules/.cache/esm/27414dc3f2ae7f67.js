let Joi,RefreshToken,User,CustomErrorHandler,JwtService,REFRESH_SECRET;_f2a‍.x([["default",()=>_f2a‍.o]]);_f2a‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_f2a‍.w("../../models",[["RefreshToken",["RefreshToken"],function(v){RefreshToken=v}],["User",["User"],function(v){User=v}]]);_f2a‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_f2a‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);_f2a‍.w("../../config",[["REFRESH_SECRET",["REFRESH_SECRET"],function(v){REFRESH_SECRET=v}]]);






const refreshTokenController = {
  async refreshToken(req, res, next) {
    //validation
    const refreshTokenSchema = Joi.object({
      refresh_token: Joi.string().required(),
    });

    const { error } = refreshTokenSchema.validate(req.body);

    if (error) {
      return next(error);
    }


    //database 
    let refreshtoken;
    try {
        
        refreshtoken= await RefreshToken.findOne({token:req.body.refresh_token});

        if(!refreshtoken){
            return next(CustomErrorHandler.unAuthorized('Invalid refesh token'));
        }


        let userId;
        try {
            const {_id} = await JwtService.verify(refreshtoken.token,REFRESH_SECRET)
            userId=_id
        } catch (error) {
            return next(CustomErrorHandler.unAuthorized('Invalid refesh token'));
        }


        const user =User.findOne({_id:userId});
        if(!user){
            return next(CustomErrorHandler.notFound('No user found'));
        }


           //token
           const  access_token=JwtService.sign({_id:user._id,role:user.role})

           const refresh_token=JwtService.sign({_id:user._id,role:user.role},'1y',REFRESH_SECRET)
 
            //database whitelist
            await RefreshToken.create({token:refresh_token});
 
 
           res.json({access_token,refresh_token})



    } catch (error) {
        return next(new Error('something went wrong '+ error.message));
    }

  },
};

_f2a‍.d(refreshTokenController);
